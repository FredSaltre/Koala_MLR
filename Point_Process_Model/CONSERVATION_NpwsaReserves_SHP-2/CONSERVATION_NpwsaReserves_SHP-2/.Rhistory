library(maptools)
library(tmap)
library(sf)
library(raster)
library(eechidna)
library(ncdf4)
library(chron)
library(readr)
library(mgcv)
library(GADMTools)
BiomodEM <- BIOMOD_EnsembleModeling(
modeling.output = BiomodModelOut,
chosen.models = 'all',
em.by='all',
eval.metric = c('TSS'),
eval.metric.quality.threshold = c(0.8),
models.eval.meth = c('TSS','ROC'),
prob.mean = FALSE,
prob.cv = T,
committee.averaging = T,
prob.mean.weight = T,
VarImport = 10)
save.image("~/Desktop/Projects/Koala_project/SDM/SDM_Koala/Version_2/NewKoalaSDM.RData")
# load the library
library(biomod2)
library(ggplot2)
library(rgdal)
library(ecospat)
library(usdm)
library(maptools)
library(tmap)
library(sf)
library(raster)
library(eechidna)
library(ncdf4)
library(chron)
library(readr)
library(mgcv)
library(GADMTools)
BiomodEM
BiomodModelOut
BiomodEM <- BIOMOD_EnsembleModeling(
modeling.output = BiomodModelOut,
chosen.models = 'all',
em.by='all',
eval.metric = c('TSS'),
eval.metric.quality.threshold = c(0.8),
models.eval.meth = c('TSS','ROC'),
prob.mean = FALSE,
prob.cv = T,
committee.averaging = T,
prob.mean.weight = T,
VarImport = 10)
list.files("~/Desktop/Projects/Koala_project/SDM/SDM_Koala/Version_2/Run/Koala/models/KoalaFirstModeling/")
setwd("~/Desktop/Projects/Koala_project/SDM/SDM_Koala/Version_2/Run/Koala/models/KoalaFirstModeling/")
BiomodEM <- BIOMOD_EnsembleModeling(
modeling.output = BiomodModelOut,
chosen.models = 'all',
em.by='all',
eval.metric = c('TSS'),
eval.metric.quality.threshold = c(0.8),
models.eval.meth = c('TSS','ROC'),
prob.mean = FALSE,
prob.cv = T,
committee.averaging = T,
prob.mean.weight = T,
VarImport = 10)
mxtPh<- BIOMOD_ModelingOptions(MAXENT = list(path_to_maxent.jar = "~/Desktop/Projects/Koala_project/SDM/SDM_Koala/Version_2/Run"))
myBiomodOption <- BIOMOD_ModelingOptions(GAM  = list(k = 3))
setwd("~/Desktop/Projects/Koala_project/SDM/SDM_Koala/Version_2/Run")
mxtPh<- BIOMOD_ModelingOptions(MAXENT = list(path_to_maxent.jar = "~/Desktop/Projects/Koala_project/SDM/SDM_Koala/Version_2/Run"))
myBiomodOption <- BIOMOD_ModelingOptions(GAM  = list(k = 3))
BiomodModelOut <- BIOMOD_Modeling(
myBiomodData,
#models = c('SRE','CTA','RF','MARS','FDA','GLM','GBM','GAM','ANN','MAXENT.Phillips'),
models = c('MAXENT.Phillips'),
models.options = myBiomodOption,
NbRunEval=3,
DataSplit=80,
Prevalence=NULL,
VarImport=10,
models.eval.meth = c('TSS','ROC'),
SaveObj = TRUE,
rescal.all.models = TRUE,
do.full.models = FALSE,
modeling.id = paste(myRespName,"FirstModeling",sep=""))
BiomodModelOut <- BIOMOD_Modeling(
myBiomodData,
#models = c('SRE','CTA','RF','MARS','FDA','GLM','GBM','GAM','ANN','MAXENT.Phillips'),
models = c('GAM'),
models.options = myBiomodOption,
NbRunEval=3,
DataSplit=80,
Prevalence=NULL,
VarImport=10,
models.eval.meth = c('TSS','ROC'),
SaveObj = TRUE,
rescal.all.models = TRUE,
do.full.models = FALSE,
modeling.id = paste(myRespName,"FirstModeling",sep=""))
# INCLUDING MAXENT and MARS
BiomodModelOut <- BIOMOD_Modeling(
myBiomodData,
#models = c('SRE','CTA','RF','MARS','FDA','GLM','GBM','GAM','ANN','MAXENT.Phillips'),
models = c('GAM'),
models.options = myBiomodOption,
NbRunEval=3,
DataSplit=80,
Prevalence=NULL,
VarImport=10,
models.eval.meth = c('TSS','ROC'),
SaveObj = TRUE,
rescal.all.models = TRUE,
do.full.models = FALSE,
modeling.id = paste(myRespName,"FirstModeling",sep=""))
BiomodModelOut <- BIOMOD_Modeling(
myBiomodData,
models = c('SRE','CTA','RF','MARS','FDA','GLM','GBM','GAM','ANN','MAXENT.Phillips'),
#models = c('GAM'),
models.options = myBiomodOption,
NbRunEval=3,
DataSplit=80,
Prevalence=NULL,
VarImport=10,
models.eval.meth = c('TSS','ROC'),
SaveObj = TRUE,
rescal.all.models = TRUE,
do.full.models = FALSE,
modeling.id = paste(myRespName,"FirstModeling",sep=""))
# get all model evaluations
BiomodModelEval <- get_evaluations(BiomodModelOut)
# print the dimnames of this object
dimnames(BiomodModelEval)
# model evaluation : by models
models_scores_graph(BiomodModelOut, by = "models", metrics = c("ROC","TSS"),xlim = c(0.65,1), ylim = c(0.65,1))
save.image("~/Desktop/Projects/Koala_project/SDM/SDM_Koala/Version_2/Run/NewKoalaSDM_MountLofty.RData")
ROC.average <- rowMeans(apply(BiomodModelEval["ROC","Testing.data",,,],c(1,2),mean),na.rm = T)
ROC.average
TSS.average <- rowMeans(apply(BiomodModelEval["TSS","Testing.data",,,],c(1,2),mean),na.rm = T)
TSS.average
BiomodEM <- BIOMOD_EnsembleModeling(
modeling.output = BiomodModelOut,
chosen.models = 'all',
em.by='all',
eval.metric = c('TSS'),
eval.metric.quality.threshold = c(0.8),
models.eval.meth = c('TSS','ROC'),
prob.mean = FALSE,
prob.cv = T,
committee.averaging = T,
prob.mean.weight = T,
VarImport = 10)
save.image("~/Desktop/Projects/Koala_project/SDM/SDM_Koala/Version_2/Run/NewKoalaSDM_MountLofty.RData")
BiomodEnsembleModelEval <- get_evaluations(BiomodEM)
# variable importance
VarimpEM<-get_variables_importance(BiomodEM)
VarimpEM<-VarimpEM[,,3] #we keep only EMwmeanByTSS
mean_VarimpEM<-rowMeans(VarimpEM) #average acros Varimp permutations
barplot(mean_VarimpEM,names=c("D2SROADS","MINTEMP","D2BWATER","RAIN","TOTWATIND","VEG","SOLAREXP","VAPPRESS","TOPOASP"),col = blues9) #barplot of variable importance for RF
save.image("~/Desktop/Projects/Koala_project/SDM/SDM_Koala/Version_2/Run/NewKoalaSDM_MountLofty.RData")
Varesp_EM <- BIOMOD_LoadModels(BiomodEM, models = 'EMwmeanByTSS')
BiomodEM
Varesp_EM <- BIOMOD_LoadModels(BiomodEM, models = 'Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData')
Varesp_EM <- BIOMOD_LoadModels(BiomodEM, models = 'Koala_EMwmeanByTSS')
Varesp_EM <- BIOMOD_LoadModels(BiomodEM, 'EMwmeanByTSS')
Varesp_EM
Varesp_EM[,3]
Varesp_EM[,,3]
Varesp_EM <- BIOMOD_LoadModels(BiomodEM, models="EMwmeanByTSS")
Varesp_EM <- BIOMOD_LoadModels(BiomodEM, models = "EMwmeanByTSS")
plot(BiomodEM)
BiomodEnsembleModelEval
Varesp_EM <- BIOMOD_LoadModels(BiomodEM, 'EMwmeanByTSS')
VarimpEM<-VarimpEM[,,3] #we keep only EMwmeanByTSS
VarimpEM
save.image("~/Desktop/Projects/Koala_project/SDM/SDM_Koala/Version_2/Run/NewKoalaSDM_MountLofty.RData")
rf_eval_stripEM <- biomod2::response.plot2(models = Varesp_EM, Data = get_formal_data(BiomodModelOut,'expl.var'),
show.variables = get_formal_data(BiomodModelOut,'expl.var.names'),
do.bivariate= FALSE,fixed.var.metric = 'median', legend = FALSE,
display_title = FALSE, data_species = get_formal_data(BiomodModelOut,'resp.var'))
par(mfrow=c(3,3))
plot(rf_eval_stripEM$D2SROADS$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData, main = "D2SROADS", ylab = "", xlab = "",ylim=c(0, 1))
par(mfrow=c(3,3))
plot(rf_eval_stripEM$D2SROADS$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData, main = "D2SROADS", ylab = "", xlab = "",ylim=c(0, 1))
plot(rf_eval_stripEM$MINTEMP$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData, main = "MINTEMP", ylab = "", xlab = "",ylim=c(0, 1))
plot(rf_eval_stripEM$D2BWATER$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData, main = "D2BWATER", ylab = "", xlab = "",ylim=c(0, 1))
plot(rf_eval_stripEM$RAIN$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData, main = "RAIN", ylab = "", xlab = "",ylim=c(0, 1))
plot(rf_eval_stripEM$TOTWATIND$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData, main = "TOTWATIND", ylab = "", xlab = "",ylim=c(0, 1))
plot(rf_eval_stripEM$VEG$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData, main = "VEG", ylab = "", xlab = "",ylim=c(0, 1))
plot(rf_eval_stripEM$SOLAREXP$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData, main = "SOLAREXP", ylab = "", xlab = "",ylim=c(0, 1))
plot(rf_eval_stripEM$VAPPRESS$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData, main = "VAPPRESS", ylab = "", xlab = "",ylim=c(0, 1))
plot(rf_eval_stripEM$TOPOASP$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData, main = "TOPOASP", ylab = "", xlab = "",ylim=c(0, 1))
BiomodEnsembleProj <- BIOMOD_EnsembleForecasting(
EM.output = BiomodEM,
projection.output = BiomodModelProj,
binary.meth = 'ROC',
output.format = ".grd",
do.stack = FALSE)
BiomodModelProj<-BIOMOD_Projection(modeling.output = BiomodModelOut, new.env = env.stack,proj.name = "current", binary.meth = "TSS", output.format = ".img", do.stack = FALSE)
BiomodEnsembleProj <- BIOMOD_EnsembleForecasting(
EM.output = BiomodEM,
projection.output = BiomodModelProj,
binary.meth = 'ROC',
output.format = ".grd",
do.stack = FALSE)
save.image("~/Desktop/Projects/Koala_project/SDM/SDM_Koala/Version_2/Run/NewKoalaSDM_MountLofty.RData")
BiomodEnsembleProj
myBiomodEnsembleProj <- get_predictions(BiomodEnsembleProj)#we keep only EMwmeanByTSS
plot(myBiomodEnsembleProj$gaimardi_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData)
plot(myBiomodEnsembleProj$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData)
plot(myBiomodEnsembleProj$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData)
plot(sa.proj, add=T)
points(DataSpecies.proj, pch=3)
plot(myBiomodEnsembleProj$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData)
plot(sa.proj, add=T)
head(myBiomodEnsembleProj$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData)
save.image("~/Desktop/Projects/Koala_project/SDM/SDM_Koala/Version_2/Run/NewKoalaSDM_MountLofty.RData")
library(biomod2)
library(ggplot2)
library(rgdal)
library(ecospat)
library(usdm)
library(maptools)
library(tmap)
library(sf)
library(raster)
library(eechidna)
library(ncdf4)
library(chron)
library(readr)
library(mgcv)
library(GADMTools)
BiomodModelEval
BiomodModelOut
dimnames(BiomodModelEval)
models_scores_graph(BiomodModelOut, by = "models", metrics = c("ROC","TSS"),xlim = c(0.65,1), ylim = c(0.65,1))
BiomodModelProj
BiomodEnsembleModelEval
mean_VarimpEM
Varesp_EM
par(mfrow=c(3,3))
plot(rf_eval_stripEM$D2SROADS$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData, main = "D2SROADS", ylab = "", xlab = "",ylim=c(0, 1))
BiomodEnsembleProj
BiomodEnsembleProj
myBiomodEnsembleProj
plot(myBiomodEnsembleProj$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData)
library(biomod2)
library(ggplot2)
library(rgdal)
library(ecospat)
library(usdm)
library(maptools)
library(tmap)
library(sf)
library(raster)
library(eechidna)
library(ncdf4)
library(chron)
library(readr)
library(mgcv)
library(GADMTools)
Totdens_mean<
-
;
Totdens_mean
fred2*(dens[1]/2)
fred
library(biomod2)
library(ggplot2)
library(rgdal)
library(ecospat)
library(usdm)
library(maptools)
library(tmap)
library(sf)
library(raster)
library(eechidna)
library(ncdf4)
library(chron)
library(readr)
library(mgcv)
library(GADMTools)
Totdens_mean
myBiomodEnsembleProj
fred<-myBiomodEnsembleProj$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData
fred2<-(fred-fred@data@min)/(fred@data@max-fred@data@min)
plot(fred2);plot(sa.proj, add=T)
dens<-c(461.9,470)
dens<-c(261.1,160.6)
nsd<-(dens[1]*14)/100
nsd<-(dens[1]*14)/100; dens[2]<-nsd;
dens
dens<-c(461.9,470)
nsd<-(dens[1]*14)/100; dens[2]<-nsd; #we modify the standard deviation to mimic the one on KI
dens_mean<-fred2*(dens[1]/2);plot(dens_mean);plot(sa.proj, add=T)
dens_lowCI<-fred2*((dens[1]-dens[2])/2);plot(dens_lowCI);plot(sa.proj, add=T)
dens_HighCI<-fred2*((dens[1]+dens[2])/2);plot(dens_HighCI);plot(sa.proj, add=T)
Totdens_mean<-sum(dens_mean@data@values, na.rm =T)
Totdens_HighCI<-sum(dens_HighCI@data@values, na.rm =T)
Totdens_LowCI<-sum(dens_lowCI@data@values, na.rm =T)
Totdens_mean
Totdens_HighCI
Totdens_LowCI
par(mfrow=c(3,3))
plot(rf_eval_stripEM$D2SROADS$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData, main = "D2SROADS", ylab = "", xlab = "",ylim=c(0, 1))
plot(rf_eval_stripEM$D2SROADS$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData, main = "D2SROADS", ylab = "", xlab = "",ylim=c(0, 1))
plot(rf_eval_stripEM$MINTEMP$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData, main = "MINTEMP", ylab = "", xlab = "",ylim=c(0, 1))
plot(rf_eval_stripEM$D2BWATER$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData, main = "D2BWATER", ylab = "", xlab = "",ylim=c(0, 1))
plot(rf_eval_stripEM$RAIN$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData, main = "RAIN", ylab = "", xlab = "",ylim=c(0, 1))
plot(rf_eval_stripEM$TOTWATIND$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData, main = "TOTWATIND", ylab = "", xlab = "",ylim=c(0, 1))
plot(rf_eval_stripEM$VEG$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData, main = "VEG", ylab = "", xlab = "",ylim=c(0, 1))
plot(rf_eval_stripEM$SOLAREXP$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData, main = "SOLAREXP", ylab = "", xlab = "",ylim=c(0, 1))
plot(rf_eval_stripEM$VAPPRESS$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData, main = "VAPPRESS", ylab = "", xlab = "",ylim=c(0, 1))
plot(rf_eval_stripEM$TOPOASP$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData, main = "TOPOASP", ylab = "", xlab = "",ylim=c(0, 1))
barplot(mean_VarimpEM,names=c("D2SROADS","MINTEMP","D2BWATER","RAIN","TOTWATIND","VEG","SOLAREXP","VAPPRESS","TOPOASP"),col = blues9) #barplot of variable importance for RF
plot(myBiomodEnsembleProj$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData)
myBiomodEnsembleProj$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData
plot(myBiomodEnsembleProj$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData)
library(biomod2)
library(ggplot2)
library(rgdal)
plot(myBiomodEnsembleProj$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData)
plot(myBiomodEnsembleProj$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData)
plot(sa.proj, add=T)
plot(DataSpecies.proj)
plot(myBiomodEnsembleProj$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData)
plot(sa.proj, add=T)
points(DataSpecies.proj)
plot(myBiomodEnsembleProj$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData)
plot(sa.proj, add=T)
points(DataSpecies.proj,cex = 0.6)
load("~/Desktop/Koala_model/SDM/NewKoalaSDM_MountLofty.RData")
setwd("~/Desktop/Koala_model/SDM")
###########################################################################
# we will use the
# we use the conservation parcs =  limites des parcs..
shp = st_read("./CONSERVATION_NpwsaReserves_SHP-2/CONSERVATION_NpwsaReserves_SHP-2/CONSERVATION_NpwsaReserves_GDA2020.shp", quiet=FALSE)
###########################################################################
# we will use the
# we use the conservation parcs =  limites des parcs..
shp = st_read("./CONSERVATION_NpwsaReserves_SHP-2/CONSERVATION_NpwsaReserves_SHP-2/CONSERVATION_NpwsaReserves_GDA2020.shp", quiet=FALSE)
library(biomod2)
library(ggplot2)
library(rgdal)
library(ecospat)
library(usdm)
library(maptools)
library(tmap)
library(sf)
library(raster)
library(eechidna)
library(ncdf4)
library(chron)
library(readr)
library(mgcv)
library(GADMTools)
library(raster)
###########################################################################
# we will use the
# we use the conservation parcs =  limites des parcs..
shp = st_read("./CONSERVATION_NpwsaReserves_SHP-2/CONSERVATION_NpwsaReserves_SHP-2/CONSERVATION_NpwsaReserves_GDA2020.shp", quiet=FALSE)
###########################################################################
# we will use the
# we use the conservation parcs =  limites des parcs..
shp = st_read("CONSERVATION_NpwsaReserves_GDA2020.shp", quiet=FALSE)
###########################################################################
# we will use the
# we use the conservation parcs =  limites des parcs..
shp = st_read("./CONSERVATION_NpwsaReserves_SHP-2/CONSERVATION_NpwsaReserves_SHP-2/CONSERVATION_NpwsaReserves_GDA2020.shp", quiet=FALSE)
setwd("~/Desktop/Koala_model/koalas")
###########################################################################
# we will use the
# we use the conservation parcs =  limites des parcs..
shp = st_read("./CONSERVATION_NpwsaReserves_SHP-2/CONSERVATION_NpwsaReserves_SHP-2/CONSERVATION_NpwsaReserves_GDA2020.shp", quiet=FALSE)
shp <- st_geometry(shp)
lshp <- vector("list",length(shp))
for(i in 1:length(shp)) { lshp[[i]] <- as.owin(shp[[i]]) }
out<-c()
for (i in 1:length(lshp)){
test.df<- ldply(lshp[[i]]$bdry, data.frame);nt<-length(test.df$x)
test.proj <- project(as.matrix(coordinates(test.df)), proj=(as.character("+proj=eqc +lat_ts=60 +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 +a=6378137.0 +b=6378137.0 +units=m +no_defs")))
#plot(test.proj)
points(test.proj, type = "l", pch = NULL, col = "blue", cex = .6,)
out<-rbind(out,cbind(as.matrix(rep(i,nt)),test.proj))
rm(test.df,test.proj,nt)
}
###########################################################################
# we will use the
# we use the conservation parcs =  limites des parcs..
library(dplyr)
out<-c()
for (i in 1:length(lshp)){
test.df<- ldply(lshp[[i]]$bdry, data.frame);nt<-length(test.df$x)
test.proj <- project(as.matrix(coordinates(test.df)), proj=(as.character("+proj=eqc +lat_ts=60 +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 +a=6378137.0 +b=6378137.0 +units=m +no_defs")))
#plot(test.proj)
points(test.proj, type = "l", pch = NULL, col = "blue", cex = .6,)
out<-rbind(out,cbind(as.matrix(rep(i,nt)),test.proj))
rm(test.df,test.proj,nt)
}
###########################################################################
# we will use the
# we use the conservation parcs =  limites des parcs..
library(plyr)
for (i in 1:length(lshp)){
test.df<- ldply(lshp[[i]]$bdry, data.frame);nt<-length(test.df$x)
test.proj <- project(as.matrix(coordinates(test.df)), proj=(as.character("+proj=eqc +lat_ts=60 +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 +a=6378137.0 +b=6378137.0 +units=m +no_defs")))
#plot(test.proj)
points(test.proj, type = "l", pch = NULL, col = "blue", cex = .6,)
out<-rbind(out,cbind(as.matrix(rep(i,nt)),test.proj))
rm(test.df,test.proj,nt)
}
library(plyr)
shp = st_read("./CONSERVATION_NpwsaReserves_SHP-2/CONSERVATION_NpwsaReserves_SHP-2/CONSERVATION_NpwsaReserves_GDA2020.shp", quiet=FALSE)
shp <- st_geometry(shp)
lshp <- vector("list",length(shp))
for(i in 1:length(shp)) { lshp[[i]] <- as.owin(shp[[i]]) }
out<-c()
for (i in 1:length(lshp)){
test.df<- ldply(lshp[[i]]$bdry, data.frame);nt<-length(test.df$x)
test.proj <- project(as.matrix(coordinates(test.df)), proj=(as.character("+proj=eqc +lat_ts=60 +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 +a=6378137.0 +b=6378137.0 +units=m +no_defs")))
#plot(test.proj)
points(test.proj, type = "l", pch = NULL, col = "blue", cex = .6,)
out<-rbind(out,cbind(as.matrix(rep(i,nt)),test.proj))
rm(test.df,test.proj,nt)
}
out<-as.data.frame(out)
fred2
BiomodEnsembleProj
myBiomodEnsembleProj <- get_predictions(BiomodEnsembleProj)#we keep only EMwmeanByTSS
plot(myBiomodEnsembleProj$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData)
plot(sa.proj, add=T)
##calculate population size based on population density
fred<-myBiomodEnsembleProj$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData
fred2<-(fred-fred@data@min)/(fred@data@max-fred@data@min) #we standardize the projections
plot(fred2);plot(sa.proj, add=T)
fred3 <- as.data.frame(fred2, xy = T)
dens.reg<-106
fred3$dens<-fred3$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData*dens.reg
Totaldens.reg<-sum(fred3$dens, na.rm = TRUE)
Totaldens.reg #32850.55 total koala in the area
dens.reg.inf<-104
fred3$dens.inf<-fred3$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData*dens.reg.inf
Totaldens.reg.inf<-sum(fred3$dens.inf, na.rm = TRUE)
Totaldens.reg.inf #32850.55 total koala in the area
dens.reg.sup<-123
fred3$dens.sup<-fred3$Koala_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData*dens.reg.sup
Totaldens.reg.sup<-sum(fred3$dens.sup, na.rm = TRUE)
Totaldens.reg.sup #32230.73 total maximum koala in the area
144403/38119.03
load("/Users/fredsaltre/Desktop/Koala_model/koalas/Koala_SDM&Density.RData")
library(sf)
library(spatstat)
library(MASS)
library(Imap)
library(rgdal)
### taille de la grille de calcul poisson
ng <- 160 ## taille assurant la stabilite de l'estimation d'intensite
##= on delimite la zone sur laquelle on travaille et on lit tous les fichiers
source("LatLongToXY.r")
###
##    limites des parcs..
###
shp = st_read("./CONSERVATION_NpwsaReserves_SHP-2/CONSERVATION_NpwsaReserves_SHP-2/CONSERVATION_NpwsaReserves_GDA2020.shp",
quiet=FALSE)
shp <- st_geometry(shp)
lshp <- vector("list",length(shp))
for(i in 1:length(shp)) { lshp[[i]] <- as.owin(shp[[i]]) }
Koala <- read.csv("GKC1.2.long.lat.csv")
Koala <- as.ppp(Koala[,3:2],c(129,140,-38,-26))
# on enleve les points tres extreme (qui sont sur les iles etc...)
selx <- (Koala$x > 138.2591)  & (Koala$x< 138.9909)
sely <- (Koala$y > -35.23021) & (Koala$y< -34.6995)
sel <- selx & sely
Koala2 <- as.ppp(matrix(c(Koala$x[sel],Koala$y[sel]),ncol=2,byrow=F),c(range(Koala$x[sel]),range(Koala$y[sel]))) #on passe les donnees en processus spatial
# on defini l'envelope convexe des donnees qui restent => on delimite notre zone de travail
convKoala2 <- convexhull(Koala2)
###
## recherche du point haut de detection et effet de la protection
# 240 est la mailla a laquelle on travaille qui est un cmprmis entre la precision et le temps que ca prends pour faire tourner
kde.res <- kde2d(Koala2$x,Koala2$y,n=240,lims=c(Koala2$window$x,Koala2$window$y)) # on calcule la densite empirique (observe)
kde.res$z <- sqrt(kde.res$z) #racine cree pour avoir un graphique ou on voit un truc
plot(Koala2,type="n",main="intensite observee de koalas")
image(kde.res,add=T) # on fait l'image de du noyau de densite
#for (i in 1:length(shp)) # rajourte les parc sur l'image
#{
#plot(shp[[i]],col=2,add=T)
#}
#points(Koala2,pch=19,col=3,cex=0.1) #on rajouite les koalas
shp = st_read("./CONSERVATION_NpwsaReserves_SHP-2/CONSERVATION_NpwsaReserves_SHP-2/CONSERVATION_NpwsaReserves_GDA2020.shp",
quiet=FALSE)
setwd("~/Desktop/Koala_model/koalas")
###
##    limites des parcs..
###
shp = st_read("./CONSERVATION_NpwsaReserves_SHP-2/CONSERVATION_NpwsaReserves_GDA2020.shp",
quiet=FALSE)
###
##    limites des parcs..
###
shp = st_read("CONSERVATION_NpwsaReserves_SHP-2/CONSERVATION_NpwsaReserves_GDA2020.shp",
quiet=FALSE)
###
##    limites des parcs..
###
shp = st_read("CONSERVATION_NpwsaReserves_GDA2020.shp",
quiet=FALSE)
setwd("~/Desktop/Koala_model/koalas/CONSERVATION_NpwsaReserves_SHP-2/CONSERVATION_NpwsaReserves_SHP-2")
###
##    limites des parcs..
###
shp = st_read("CONSERVATION_NpwsaReserves_GDA2020.shp",
quiet=FALSE)
